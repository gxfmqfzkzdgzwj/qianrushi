<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\come.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\come.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Aug 08 09:37:15 2017
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PhyRxHandleFifoLevelEvent &rArr; PhyRxHandlePayloadReadyEvent &rArr; Radio_Phy_PdDataConfirm &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[61]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[1b]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[1c]">CMP0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[25]">DAC0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[c]">DMA0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[d]">DMA1_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[e]">DMA2_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[f]">DMA3_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[11]">FTFA_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[23]">I2S0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[13]">LLWU_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[28]">LPTMR0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[12]">LVD_LVW_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[27]">MCG_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[22]">PIT_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[2a]">PORTA_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[2b]">PORTC_PORTD_IRQHandler</a> from phyisr.o(i.PORTC_PORTD_IRQHandler) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[2f]">PhyRxHandleDummyEvent</a> from phyisr.o(i.PhyRxHandleDummyEvent) referenced from phyplmedata.o(i.PhyAbort)
 <LI><a href="#[2f]">PhyRxHandleDummyEvent</a> from phyisr.o(i.PhyRxHandleDummyEvent) referenced from phyisr.o(i.PhyRxHandleFifoLevelEvent)
 <LI><a href="#[2f]">PhyRxHandleDummyEvent</a> from phyisr.o(i.PhyRxHandleDummyEvent) referenced from phyisr.o(i.PhyTimeHandleEventTimeout)
 <LI><a href="#[33]">PhyRxHandleFifoLevelEvent</a> from phyisr.o(i.PhyRxHandleFifoLevelEvent) referenced from phyisr.o(i.PhyRxHandlePHREvent)
 <LI><a href="#[34]">PhyRxHandlePHREvent</a> from phyisr.o(i.PhyRxHandlePHREvent) referenced from phyisr.o(i.PhyRxHandleSyncAddresEvent)
 <LI><a href="#[31]">PhyRxHandleSyncAddresEvent</a> from phyisr.o(i.PhyRxHandleSyncAddresEvent) referenced from phyplmedata.o(i.PhyPlmeRxRequest)
 <LI><a href="#[30]">PhyTxHandleDummyEvent</a> from phyisr.o(i.PhyTxHandleDummyEvent) referenced from phyplmedata.o(i.PhyAbort)
 <LI><a href="#[30]">PhyTxHandleDummyEvent</a> from phyisr.o(i.PhyTxHandleDummyEvent) referenced from phyisr.o(i.PhyTimeHandleEventTimeout)
 <LI><a href="#[30]">PhyTxHandleDummyEvent</a> from phyisr.o(i.PhyTxHandleDummyEvent) referenced from phyisr.o(i.PhyTxPacketSentEvent)
 <LI><a href="#[32]">PhyTxHandleFifoLevelEvent</a> from phyisr.o(i.PhyTxHandleFifoLevelEvent) referenced from phyplmedata.o(i.PhyPrepareTx)
 <LI><a href="#[35]">PhyTxPacketSentEvent</a> from phyisr.o(i.PhyTxPacketSentEvent) referenced from phyisr.o(i.PhyTxHandleFifoLevelEvent)
 <LI><a href="#[36]">Phy_Task</a> from phystatemachine.o(i.Phy_Task) referenced from phystatemachine.o(i.Phy_Init)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[21]">RTC_Seconds_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[10]">Reserved20_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[24]">Reserved40_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[29]">Reserved45_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from freertos_tick_config.o(i.SysTick_Handler) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from system_mkw01z4.o(i.SystemInit) referenced from startup_mkw01z4.o(.text)
 <LI><a href="#[1d]">TPM0_IRQHandler</a> from phytime.o(i.TPM0_IRQHandler) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[1e]">TPM1_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[1f]">TPM2_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[26]">TSI0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[1a]">UART2_IRQHandler</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(RESET)
 <LI><a href="#[3b]">__main</a> from __main.o(!!!main) referenced from startup_mkw01z4.o(.text)
 <LI><a href="#[2d]">init_data_bss</a> from startup_mkw01z4.o(.text) referenced from startup_mkw01z4.o(.text)
 <LI><a href="#[38]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[37]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3a]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[39]">vEventGroupSetBitsCallback</a> from event_groups.o(i.vEventGroupSetBitsCallback) referenced from event_groups.o(i.xEventGroupSetBitsFromISR)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[42]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[18a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[18b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[18c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[18d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[190]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[191]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[192]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[193]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[194]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[195]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[196]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[197]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[198]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[199]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1a4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1a5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1a6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1a7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1a8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[43]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[45]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; vPortDefineHeapRegions
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[47]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[63]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[17f]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[180]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[182]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d]"></a>init_data_bss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Reserved40_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkw01z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkw01z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeMultiplicator
</UL>

<P><STRONG><a name="[1ae]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeDivider
</UL>

<P><STRONG><a name="[1af]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_assert</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_IsPinIntPending
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_DRV_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetChnMsnbaElsnbaVal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetChnCountVal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_IsChnIntEnabled
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetChnStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_EnableChnInt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_DisableChnInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_ClearChnInt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableSpiClock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_ClearPinIntFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinOutput
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ReadPinInput
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ClearPinOutput
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableTpmClock
</UL>

<P><STRONG><a name="[1b0]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>PhyRxHandleDummyEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, phyisr.o(i.PhyRxHandleDummyEvent))
<BR>[Address Reference Count : 3]<UL><LI> phyplmedata.o(i.PhyAbort)
<LI> phyisr.o(i.PhyRxHandleFifoLevelEvent)
<LI> phyisr.o(i.PhyTimeHandleEventTimeout)
</UL>
<P><STRONG><a name="[1b6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>PhyTxHandleDummyEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, phyisr.o(i.PhyTxHandleDummyEvent))
<BR>[Address Reference Count : 3]<UL><LI> phyplmedata.o(i.PhyAbort)
<LI> phyisr.o(i.PhyTimeHandleEventTimeout)
<LI> phyisr.o(i.PhyTxPacketSentEvent)
</UL>
<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_SetBaud
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllExternalRefFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[54]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[52]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[5b]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[58]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[5a]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[4f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[59]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[44]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5f]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[5e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1bd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1be]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>ASP_TelecSendRawData</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, asptemp.o(i.ASP_TelecSendRawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ASP_TelecSendRawData &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Disable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[6b]"></a>Asp_EnableXCVRInterrupts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asptemp.o(i.Asp_EnableXCVRInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Asp_EnableXCVRInterrupts &rArr; XCVRDrv_IRQ_DIO4_Enable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>CCAPinHandler_Interrupt</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, phyisr.o(i.CCAPinHandler_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CCAPinHandler_Interrupt &rArr; Phy_SetRxOnUntilNextEvent &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Disable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_GetRssi
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcAuto
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_XCVRTxWarmupTime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PlmeEdConfirm
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PlmeCcaConfirm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_PORTD_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>CLOCK_HAL_GetFllClk</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetFllClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllFreq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[80]"></a>CLOCK_HAL_GetFllRefClk</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetFllRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllExternalRefFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[87]"></a>CLOCK_HAL_GetInternalRefClk</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetInternalRefClk))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[84]"></a>CLOCK_HAL_GetOutClk</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetOutClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
</UL>

<P><STRONG><a name="[86]"></a>CLOCK_HAL_GetPll0Clk</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetPll0Clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_HAL_GetPll0Clk &rArr; CLOCK_HAL_GetPll0RefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0RefFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[88]"></a>CLOCK_HAL_GetPll0RefFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_HAL_GetPll0RefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
</UL>

<P><STRONG><a name="[83]"></a>CLOCK_HAL_TestFllExternalRefFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_TestFllExternalRefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>

<P><STRONG><a name="[81]"></a>CLOCK_HAL_TestFllFreq</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_TestFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_TestFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[8a]"></a>CLOCK_SYS_EnablePortClock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock_mkw01z4.o(i.CLOCK_SYS_EnablePortClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_EnablePortClock &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_xcvr_pins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_pins
</UL>

<P><STRONG><a name="[8c]"></a>CLOCK_SYS_EnableSpiClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mkw01z4.o(i.CLOCK_SYS_EnableSpiClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_EnableSpiClock &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[8d]"></a>CLOCK_SYS_EnableTpmClock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock_mkw01z4.o(i.CLOCK_SYS_EnableTpmClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_EnableTpmClock &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_DRV_Init
</UL>

<P><STRONG><a name="[8e]"></a>CLOCK_SYS_GetBusClockFreq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_clock_mkw01z4.o(i.CLOCK_SYS_GetBusClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutDiv4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSpiFreq
</UL>

<P><STRONG><a name="[91]"></a>CLOCK_SYS_GetSpiFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mkw01z4.o(i.CLOCK_SYS_GetSpiFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CLOCK_SYS_GetSpiFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[90]"></a>CLOCK_SYS_GetSystemClockFreq</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_clock_mkw01z4.o(i.CLOCK_SYS_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutDiv1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSpiFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>

<P><STRONG><a name="[102]"></a>FLib_MemCmp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, functionlib.o(i.FLib_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLib_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_IsrRxFilterDest
</UL>

<P><STRONG><a name="[dd]"></a>FLib_MemCpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, functionlib.o(i.FLib_MemCpy))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[93]"></a>GPIO_DRV_ClearPinIntFlag</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_DRV_ClearPinIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPIO_DRV_ClearPinIntFlag &rArr; PORT_HAL_ClearPinIntFlag &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_ClearPinIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Clear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Clear
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Clear
</UL>

<P><STRONG><a name="[95]"></a>GPIO_DRV_ClearPinOutput</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_DRV_ClearPinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPIO_DRV_ClearPinOutput &rArr; GPIO_HAL_ClearPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ClearPinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_Reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
</UL>

<P><STRONG><a name="[97]"></a>GPIO_DRV_ReadPinInput</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_DRV_ReadPinInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPIO_DRV_ReadPinInput &rArr; GPIO_HAL_ReadPinInput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ReadPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_Reset
</UL>

<P><STRONG><a name="[99]"></a>GPIO_DRV_SetPinOutput</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_DRV_SetPinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVR_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_Reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_HAL_SetPinDir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_gpio_hal.o(i.GPIO_HAL_SetPinDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_xcvr_pins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_pins
</UL>

<P><STRONG><a name="[110]"></a>ListInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, genericlist.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TaskInitialize
</UL>

<P><STRONG><a name="[9c]"></a>ListRemoveHead</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, genericlist.o(i.ListRemoveHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListRemoveHead
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAlloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHeadMsg
</UL>

<P><STRONG><a name="[9f]"></a>ListRemoveHeadMsg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, messaging.o(i.ListRemoveHeadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ListRemoveHeadMsg &rArr; ListRemoveHead
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[a0]"></a>MEM_BufferAlloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, memmanager.o(i.MEM_BufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MEM_BufferAlloc &rArr; ListRemoveHead
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[a1]"></a>PHY_EventSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phystatemachine.o(i.PHY_EventSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_TimeRxTimeoutIndication
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PlmeEdConfirm
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PlmeCcaConfirm
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataIndication
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataConfirm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_DummyEvent
</UL>

<P><STRONG><a name="[2b]"></a>PORTC_PORTD_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, phyisr.o(i.PORTC_PORTD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = PORTC_PORTD_IRQHandler &rArr; CCAPinHandler_Interrupt &rArr; Phy_SetRxOnUntilNextEvent &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Detected
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Detected
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Detected
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRHandlerInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>PhyAbort</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, phyplmedata.o(i.PhyAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = PhyAbort &rArr; Phy_SetOperationModeFast &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Disable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Disable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Disable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_ClearFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASP_TelecSendRawData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_TimeRxTimeoutIndication
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxRestart
</UL>

<P><STRONG><a name="[ad]"></a>PhyHwInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, phypacketprocessor.o(i.PhyHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = PhyHwInit &rArr; XCVR_Init &rArr; spi_master_init &rArr; CLOCK_SYS_GetSpiFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVR_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_RFdefaultInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimerInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_InitOnStartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Init
</UL>

<P><STRONG><a name="[b2]"></a>PhyIsIdleRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, phystatemachine.o(i.PhyIsIdleRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PhyIsIdleRx &rArr; PhyPpGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[b3]"></a>PhyIsrPassRxParams</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phyisr.o(i.PhyIsrPassRxParams))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TaskInitialize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
</UL>

<P><STRONG><a name="[b4]"></a>PhyPassTxParams</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, phyisr.o(i.PhyPassTxParams))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
</UL>

<P><STRONG><a name="[68]"></a>PhyPdDataRequest</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, phyplmedata.o(i.PhyPdDataRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = PhyPdDataRequest &rArr; PhyPlmeCcaEdRequest &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFifoThreshold
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPassTxParams
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyIsrPassRxParams
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASP_TelecSendRawData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePdDataReq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[b8]"></a>PhyPib_EnableAFC</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, phypib.o(i.PhyPib_EnableAFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = PhyPib_EnableAFC &rArr; Phy_EnableAfcAuto &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcLowBeta
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcAuto
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_InitOnStartUp
</UL>

<P><STRONG><a name="[b0]"></a>PhyPib_InitOnStartUp</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, phypib.o(i.PhyPib_InitOnStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PhyPib_InitOnStartUp &rArr; PhyPib_RFUpdatePowerStep &rArr; Phy_SetPowerStep &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateRFfrequency
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdatePreambleLength
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdatePowerStep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_EnableAFC
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyHwInit
</UL>

<P><STRONG><a name="[bc]"></a>PhyPib_RFUpdateModulationParameters</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, phypib.o(i.PhyPib_RFUpdateModulationParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = PhyPib_RFUpdateModulationParameters &rArr; Phy_SetRxFilterBwAfc &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxFilterBwAfc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxFilterBw
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetModulationType
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetModulationShaping
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetLowBetaAfcOffset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFreqDeviation
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetDccFreqAfc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetDccFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetBitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_InitOnStartUp
</UL>

<P><STRONG><a name="[bb]"></a>PhyPib_RFUpdatePowerStep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, phypib.o(i.PhyPib_RFUpdatePowerStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = PhyPib_RFUpdatePowerStep &rArr; Phy_SetPowerStep &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetPowerStep
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_InitOnStartUp
</UL>

<P><STRONG><a name="[ba]"></a>PhyPib_RFUpdatePreambleLength</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, phypib.o(i.PhyPib_RFUpdatePreambleLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = PhyPib_RFUpdatePreambleLength &rArr; Phy_SetPreambleSize &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetPreambleSize
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_InitOnStartUp
</UL>

<P><STRONG><a name="[bd]"></a>PhyPib_RFUpdateRFfrequency</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, phypib.o(i.PhyPib_RFUpdateRFfrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = PhyPib_RFUpdateRFfrequency &rArr; Phy_SetCarrierFreq &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetCarrierFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_InitOnStartUp
</UL>

<P><STRONG><a name="[b6]"></a>PhyPlmeCcaEdRequest</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, phyplmedata.o(i.PhyPlmeCcaEdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = PhyPlmeCcaEdRequest &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureDIOPins
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRssiThreshold
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcAuto
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_XCVRRxWarmupTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeMultiplicator
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeEdReq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeCcaReq
</UL>

<P><STRONG><a name="[cf]"></a>PhyPlmeRxRequest</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, phyplmedata.o(i.PhyPlmeRxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PhyPlmeRxRequest &rArr; XCVRDrv_ConfigureDIOPins &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureDIOPins
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRssiThreshold
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFifoThreshold
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyIsrPassRxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnterIdle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataConfirm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxRestart
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
</UL>

<P><STRONG><a name="[aa]"></a>PhyPpGetState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phyisr.o(i.PhyPpGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PhyPpGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_EnableAFC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyIsIdleRx
</UL>

<P><STRONG><a name="[79]"></a>PhyPrepareTx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, phyplmedata.o(i.PhyPrepareTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PhyPrepareTx &rArr; XCVRDrv_FillFifo &rArr; XCVRDrv_WriteBytesToFifoLSB &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureDIOPins
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_FillFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[33]"></a>PhyRxHandleFifoLevelEvent</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, phyisr.o(i.PhyRxHandleFifoLevelEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = PhyRxHandleFifoLevelEvent &rArr; PhyRxHandlePayloadReadyEvent &rArr; Radio_Phy_PdDataConfirm &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Disable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFifoThreshold
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableRxTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxFrameFilter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_CrcAddByte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phyisr.o(i.PhyRxHandlePHREvent)
</UL>
<P><STRONG><a name="[34]"></a>PhyRxHandlePHREvent</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, phyisr.o(i.PhyRxHandlePHREvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = PhyRxHandlePHREvent &rArr; Phy_SetRxOnUntilNextEvent &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFifoThreshold
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadFifo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableRxTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxHandleFilterFail
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phyisr.o(i.PhyRxHandleSyncAddresEvent)
</UL>
<P><STRONG><a name="[d8]"></a>PhyRxHandlePayloadReadyEvent</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, phyisr.o(i.PhyRxHandlePayloadReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = PhyRxHandlePayloadReadyEvent &rArr; Radio_Phy_PdDataConfirm &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_ClearFifo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_IndirectQueueChecksum
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_TimeRxTimeoutIndication
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataIndication
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataConfirm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxHandleFilterFail
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[31]"></a>PhyRxHandleSyncAddresEvent</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, phyisr.o(i.PhyRxHandleSyncAddresEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = PhyRxHandleSyncAddresEvent &rArr; Phy_SetRxOnUntilNextEvent &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Disable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_GetRssi
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableRxTimeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phyplmedata.o(i.PhyPlmeRxRequest)
</UL>
<P><STRONG><a name="[74]"></a>PhySetState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phyisr.o(i.PhySetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PhySetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[df]"></a>PhyTimeDisableEventTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phytime.o(i.PhyTimeDisableEventTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PhyTimeDisableEventTimeout &rArr; TPM_HAL_DisableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_DisableChnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePdDataReq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTimeout_Handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PlmeEdConfirm
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PlmeCcaConfirm
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataIndication
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataConfirm
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[b7]"></a>PhyTimeDisableEventTrigger</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phytime.o(i.PhyTimeDisableEventTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PhyTimeDisableEventTrigger &rArr; TPM_HAL_DisableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_DisableChnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePdDataReq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTrigger_Handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[d3]"></a>PhyTimeDisableRxTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phytime.o(i.PhyTimeDisableRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PhyTimeDisableRxTimeout &rArr; TPM_HAL_DisableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_DisableChnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleSyncAddresEvent
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventRxTimeout_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[e3]"></a>PhyTimeDisableWaitTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phytime.o(i.PhyTimeDisableWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PhyTimeDisableWaitTimeout &rArr; TPM_HAL_DisableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_DisableChnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventWaitTimeout_Handler
</UL>

<P><STRONG><a name="[e4]"></a>PhyTimeEventRxTimeout_Handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, phytime.o(i.PhyTimeEventRxTimeout_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = PhyTimeEventRxTimeout_Handler &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventRxTimeout
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableRxTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>PhyTimeEventTimeout_Handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, phytime.o(i.PhyTimeEventTimeout_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = PhyTimeEventTimeout_Handler &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>PhyTimeEventTrigger_Handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, phytime.o(i.PhyTimeEventTrigger_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PhyTimeEventTrigger_Handler &rArr; PhyTimeHandleEventTrigger &rArr; Phy_SetOperationModeFast &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>PhyTimeEventWaitTimeout_Handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, phytime.o(i.PhyTimeEventWaitTimeout_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PhyTimeEventWaitTimeout_Handler &rArr; PhyTimeDisableWaitTimeout &rArr; TPM_HAL_DisableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventWaitTimeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableWaitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>PhyTimeGetEventTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phytime.o(i.PhyTimeGetEventTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>

<P><STRONG><a name="[e5]"></a>PhyTimeHandleEventRxTimeout</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, phyisr.o(i.PhyTimeHandleEventRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxRestart
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventRxTimeout_Handler
</UL>

<P><STRONG><a name="[e7]"></a>PhyTimeHandleEventTimeout</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, phyisr.o(i.PhyTimeHandleEventTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Disable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Disable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Disable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_TimeRxTimeoutIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTimeout_Handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
</UL>

<P><STRONG><a name="[e9]"></a>PhyTimeHandleEventTrigger</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, phyisr.o(i.PhyTimeHandleEventTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = PhyTimeHandleEventTrigger &rArr; Phy_SetOperationModeFast &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTrigger_Handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
</UL>

<P><STRONG><a name="[eb]"></a>PhyTimeHandleEventWaitTimeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phyisr.o(i.PhyTimeHandleEventWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PhyTimeHandleEventWaitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventWaitTimeout_Handler
</UL>

<P><STRONG><a name="[e0]"></a>PhyTimeReadClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, phytime.o(i.PhyTimeReadClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PhyTimeReadClock &rArr; Phy_TimeDivider &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[76]"></a>PhyTimeReadClockTicks</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, phytime.o(i.PhyTimeReadClockTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PhyTimeReadClockTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetTimerOverflowStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetCounterVal
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleSyncAddresEvent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventWaitTimeout_Handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTrigger_Handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTimeout_Handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventRxTimeout_Handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>

<P><STRONG><a name="[f0]"></a>PhyTimeSetEventTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, phytime.o(i.PhyTimeSetEventTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetChnCountVal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetCounterVal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_EnableChnInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_ClearChnInt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>

<P><STRONG><a name="[78]"></a>PhyTimeSetEventTrigger</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, phytime.o(i.PhyTimeSetEventTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PhyTimeSetEventTrigger &rArr; PhyTimeHandleEventTrigger &rArr; Phy_SetOperationModeFast &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTrigger
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetChnCountVal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetCounterVal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_EnableChnInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_ClearChnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeEdReq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[ce]"></a>PhyTimeSetRxTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, phytime.o(i.PhyTimeSetRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventRxTimeout
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableRxTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetChnCountVal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetCounterVal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_EnableChnInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_ClearChnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>

<P><STRONG><a name="[b1]"></a>PhyTimerInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, phytime.o(i.PhyTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = PhyTimerInit &rArr; TPM_DRV_Init &rArr; CLOCK_SYS_EnableTpmClock &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetClockMode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_DRV_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_SetChnMsnbaElsnbaVal
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyHwInit
</UL>

<P><STRONG><a name="[32]"></a>PhyTxHandleFifoLevelEvent</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, phyisr.o(i.PhyTxHandleFifoLevelEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PhyTxHandleFifoLevelEvent &rArr; XCVRDrv_FillFifo &rArr; XCVRDrv_WriteBytesToFifoLSB &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_FillFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phyplmedata.o(i.PhyPrepareTx)
</UL>
<P><STRONG><a name="[35]"></a>PhyTxPacketSentEvent</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, phyisr.o(i.PhyTxPacketSentEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = PhyTxPacketSentEvent &rArr; Radio_Phy_PdDataConfirm &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Disable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_XCVRRxWarmupTime
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_TimeRxTimeoutIndication
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataIndication
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phyisr.o(i.PhyTxHandleFifoLevelEvent)
</UL>
<P><STRONG><a name="[ac]"></a>Phy_ClearFifo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, phyextended.o(i.Phy_ClearFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_ClearFifo &rArr; XCVRDrv_ReadRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[d5]"></a>Phy_CrcAddByte</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, phyisr.o(i.Phy_CrcAddByte))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_FillFifo
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[7c]"></a>Phy_EnableAfcAuto</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, phyextended.o(i.Phy_EnableAfcAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_EnableAfcAuto &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_EnableAFC
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[b9]"></a>Phy_EnableAfcLowBeta</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, phyextended.o(i.Phy_EnableAfcLowBeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_EnableAfcLowBeta &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_EnableAFC
</UL>

<P><STRONG><a name="[10c]"></a>Phy_GetEnergyLevel</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, phyisr.o(i.Phy_GetEnergyLevel))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[72]"></a>Phy_GetRssi</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phyextended.o(i.Phy_GetRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_GetRssi &rArr; XCVRDrv_ReadRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleSyncAddresEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[de]"></a>Phy_IndirectQueueChecksum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, phypacketprocessor.o(i.Phy_IndirectQueueChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Phy_IndirectQueueChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[fd]"></a>Phy_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, phystatemachine.o(i.Phy_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Phy_Init &rArr; PhyHwInit &rArr; XCVR_Init &rArr; spi_master_init &rArr; CLOCK_SYS_GetSpiFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TaskInitialize
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyHwInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>Phy_IsrRxFilterDest</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, phyisr.o(i.Phy_IsrRxFilterDest))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Phy_IsrRxFilterDest &rArr; Phy_RxHandleFilterFail &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCmp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxHandleFilterFail
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxFrameFilter
</UL>

<P><STRONG><a name="[109]"></a>Phy_LqiConvert</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, phyisr.o(i.Phy_LqiConvert))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[d6]"></a>Phy_RxFrameFilter</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, phyisr.o(i.Phy_RxFrameFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Phy_RxFrameFilter &rArr; Phy_IsrRxFilterDest &rArr; Phy_RxHandleFilterFail &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxHandleFilterFail
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_IsrRxFilterDest
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[da]"></a>Phy_RxHandleFilterFail</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, phyisr.o(i.Phy_RxHandleFilterFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Phy_RxHandleFilterFail &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxRestart
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxFrameFilter
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_IsrRxFilterDest
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
</UL>

<P><STRONG><a name="[ec]"></a>Phy_RxRestart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, phyisr.o(i.Phy_RxRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_DummyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventRxTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxHandleFilterFail
</UL>

<P><STRONG><a name="[be]"></a>Phy_SetBitrate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetBitrate &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[c9]"></a>Phy_SetCarrierFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetCarrierFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetCarrierFreq &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateRFfrequency
</UL>

<P><STRONG><a name="[c2]"></a>Phy_SetDccFreq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetDccFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetDccFreq &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[c4]"></a>Phy_SetDccFreqAfc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetDccFreqAfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetDccFreqAfc &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[b5]"></a>Phy_SetFifoThreshold</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetFifoThreshold &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[bf]"></a>Phy_SetFreqDeviation</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetFreqDeviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetFreqDeviation &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[c6]"></a>Phy_SetLowBetaAfcOffset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetLowBetaAfcOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetLowBetaAfcOffset &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[c1]"></a>Phy_SetModulationShaping</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetModulationShaping))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetModulationShaping &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[c0]"></a>Phy_SetModulationType</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetModulationType))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetModulationType &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[75]"></a>Phy_SetOperationModeFast</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetOperationModeFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetOperationModeFast &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTrigger
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[c7]"></a>Phy_SetPowerStep</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetPowerStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetPowerStep &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdatePowerStep
</UL>

<P><STRONG><a name="[c8]"></a>Phy_SetPreambleSize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetPreambleSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetPreambleSize &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdatePreambleLength
</UL>

<P><STRONG><a name="[ca]"></a>Phy_SetRssiThreshold</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phyextended.o(i.Phy_SetRssiThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Phy_SetRssiThreshold &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
</UL>

<P><STRONG><a name="[c3]"></a>Phy_SetRxFilterBw</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetRxFilterBw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetRxFilterBw &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[c5]"></a>Phy_SetRxFilterBwAfc</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, phyextended.o(i.Phy_SetRxFilterBwAfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Phy_SetRxFilterBwAfc &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPib_RFUpdateModulationParameters
</UL>

<P><STRONG><a name="[67]"></a>Phy_SetSequenceTiming</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, phystatemachine.o(i.Phy_SetSequenceTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_XCVRRxWarmupTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeMultiplicator
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_XCVRTxWarmupTime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASP_TelecSendRawData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeCcaReq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePdDataReq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnterIdle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Phy_PdDataConfirm
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[ed]"></a>Phy_TimeDivider</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, phytime.o(i.Phy_TimeDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Phy_TimeDivider &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClock
</UL>

<P><STRONG><a name="[cc]"></a>Phy_TimeMultiplicator</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, phytime.o(i.Phy_TimeMultiplicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Phy_TimeMultiplicator &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeEdReq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxOnUntilNextEvent
</UL>

<P><STRONG><a name="[cd]"></a>Phy_XCVRRxWarmupTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, phyisr.o(i.Phy_XCVRRxWarmupTime))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeEdReq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
</UL>

<P><STRONG><a name="[77]"></a>Phy_XCVRTxWarmupTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, phyisr.o(i.Phy_XCVRTxWarmupTime))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[103]"></a>Radio_Phy_DummyEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, phystatemachine.o(i.Radio_Phy_DummyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_RxRestart
</UL>

<P><STRONG><a name="[dc]"></a>Radio_Phy_PdDataConfirm</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, phystatemachine.o(i.Radio_Phy_PdDataConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Radio_Phy_PdDataConfirm &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[db]"></a>Radio_Phy_PdDataIndication</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phystatemachine.o(i.Radio_Phy_PdDataIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Radio_Phy_PdDataIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[7a]"></a>Radio_Phy_PlmeCcaConfirm</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, phystatemachine.o(i.Radio_Phy_PlmeCcaConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Radio_Phy_PlmeCcaConfirm &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[7b]"></a>Radio_Phy_PlmeEdConfirm</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, phystatemachine.o(i.Radio_Phy_PlmeEdConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Radio_Phy_PlmeEdConfirm &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[e1]"></a>Radio_Phy_TimeRxTimeoutIndication</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phystatemachine.o(i.Radio_Phy_TimeRxTimeoutIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePayloadReadyEvent
</UL>

<P><STRONG><a name="[16d]"></a>SPI_HAL_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_spi_hal.o(i.SPI_HAL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[112]"></a>SPI_HAL_SetBaud</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, fsl_spi_hal.o(i.SPI_HAL_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_HAL_SetBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[170]"></a>SPI_HAL_WriteDataBlocking</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, fsl_spi_hal.o(i.SPI_HAL_WriteDataBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_HAL_WriteDataBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, freertos_tick_config.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, system_mkw01z4.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, system_mkw01z4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>TPM0_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, phytime.o(i.TPM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = TPM0_IRQHandler &rArr; PhyTimeEventRxTimeout_Handler &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventWaitTimeout_Handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTrigger_Handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventTimeout_Handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeEventRxTimeout_Handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_IsChnIntEnabled
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetTimerOverflowStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_GetChnStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_ClearChnInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkw01z4.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>TPM_DRV_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, fsl_tpm_driver.o(i.TPM_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = TPM_DRV_Init &rArr; CLOCK_SYS_EnableTpmClock &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableTpmClock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_HAL_Reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimerInit
</UL>

<P><STRONG><a name="[117]"></a>TPM_HAL_Reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_tpm_hal.o(i.TPM_HAL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TPM_HAL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_DRV_Init
</UL>

<P><STRONG><a name="[f7]"></a>TPM_HAL_SetClockMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_tpm_hal.o(i.TPM_HAL_SetClockMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPM_HAL_SetClockMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimerInit
</UL>

<P><STRONG><a name="[119]"></a>XCVRDrv_ConfigureCLKO</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_ConfigureCLKO))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_ConfigureCLKO &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVR_Init
</UL>

<P><STRONG><a name="[cb]"></a>XCVRDrv_ConfigureDIOPins</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_ConfigureDIOPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_ConfigureDIOPins &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
</UL>

<P><STRONG><a name="[d2]"></a>XCVRDrv_FillFifo</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, phyisr.o(i.XCVRDrv_FillFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_FillFifo &rArr; XCVRDrv_WriteBytesToFifoLSB &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_CrcAddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxHandleFifoLevelEvent
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
</UL>

<P><STRONG><a name="[11b]"></a>XCVRDrv_IRQ_DIO0_Clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO0_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO0_Clear &rArr; GPIO_DRV_ClearPinIntFlag &rArr; PORT_HAL_ClearPinIntFlag &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRHandlerInterrupt
</UL>

<P><STRONG><a name="[a3]"></a>XCVRDrv_IRQ_DIO0_Detected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO0_Detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO0_Detected &rArr; PORT_HAL_IsPinIntPending &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_IsPinIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_PORTD_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>XCVRDrv_IRQ_DIO0_Disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO0_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO0_Disable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASP_TelecSendRawData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleSyncAddresEvent
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxPacketSentEvent
</UL>

<P><STRONG><a name="[6d]"></a>XCVRDrv_IRQ_DIO0_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO0_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO0_Enable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asp_EnableXCVRInterrupts
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[d7]"></a>XCVRDrv_IRQ_DIO1_Clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO1_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO1_Clear &rArr; GPIO_DRV_ClearPinIntFlag &rArr; PORT_HAL_ClearPinIntFlag &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRHandlerInterrupt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[a4]"></a>XCVRDrv_IRQ_DIO1_Detected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO1_Detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO1_Detected &rArr; PORT_HAL_IsPinIntPending &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_IsPinIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_PORTD_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>XCVRDrv_IRQ_DIO1_Disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO1_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO1_Disable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTxHandleFifoLevelEvent
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[6c]"></a>XCVRDrv_IRQ_DIO1_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO1_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO1_Enable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asp_EnableXCVRInterrupts
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[70]"></a>XCVRDrv_IRQ_DIO4_Clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO4_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO4_Clear &rArr; GPIO_DRV_ClearPinIntFlag &rArr; PORT_HAL_ClearPinIntFlag &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[a6]"></a>XCVRDrv_IRQ_DIO4_Detected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO4_Detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO4_Detected &rArr; PORT_HAL_IsPinIntPending &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_IsPinIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_PORTD_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>XCVRDrv_IRQ_DIO4_Disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO4_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO4_Disable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeHandleEventTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[6e]"></a>XCVRDrv_IRQ_DIO4_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_IRQ_DIO4_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_IRQ_DIO4_Enable &rArr; PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPinIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asp_EnableXCVRInterrupts
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
</UL>

<P><STRONG><a name="[af]"></a>XCVRDrv_RFdefaultInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_RFdefaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_RFdefaultInit &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyHwInit
</UL>

<P><STRONG><a name="[d4]"></a>XCVRDrv_ReadBytesFromFifoLSB</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_ReadBytesFromFifoLSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_ReadBytesFromFifoLSB &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_configure_serialization_msb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_configure_serialization_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleFifoLevelEvent
</UL>

<P><STRONG><a name="[d9]"></a>XCVRDrv_ReadFifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_ReadFifo &rArr; XCVRDrv_ReadRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
</UL>

<P><STRONG><a name="[6a]"></a>XCVRDrv_ReadRegister</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_ReadRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureDIOPins
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureCLKO
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_GetRssi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASP_TelecSendRawData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxFilterBwAfc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxFilterBw
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetPowerStep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetModulationType
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetModulationShaping
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFifoThreshold
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetDccFreqAfc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetDccFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcAuto
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_ClearFifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadFifo
</UL>

<P><STRONG><a name="[11f]"></a>XCVRDrv_Reset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_Reset &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ReadPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVR_Init
</UL>

<P><STRONG><a name="[11a]"></a>XCVRDrv_WriteBytesToFifoLSB</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_WriteBytesToFifoLSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_WriteBytesToFifoLSB &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_configure_serialization_msb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_configure_serialization_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_FillFifo
</UL>

<P><STRONG><a name="[d1]"></a>XCVRDrv_WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVRDrv_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_WriteFifo &rArr; XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
</UL>

<P><STRONG><a name="[d0]"></a>XCVRDrv_WriteFifoLSB</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_WriteFifoLSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_WriteFifoLSB &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_configure_serialization_msb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_configure_serialization_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPrepareTx
</UL>

<P><STRONG><a name="[f8]"></a>XCVRDrv_WriteRegister</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx123xdrv.o(i.XCVRDrv_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = XCVRDrv_WriteRegister &rArr; GPIO_DRV_SetPinOutput &rArr; GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureDIOPins
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureCLKO
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxFilterBwAfc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRxFilterBw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetRssiThreshold
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetPreambleSize
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetPowerStep
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetOperationModeFast
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetModulationType
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetModulationShaping
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetLowBetaAfcOffset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFreqDeviation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetFifoThreshold
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetDccFreqAfc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetDccFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetCarrierFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetBitrate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcLowBeta
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnableAfcAuto
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_RFdefaultInit
</UL>

<P><STRONG><a name="[a5]"></a>XCVRHandlerInterrupt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, phyisr.o(i.XCVRHandlerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = XCVRHandlerInterrupt &rArr; XCVRDrv_IRQ_DIO1_Clear &rArr; GPIO_DRV_ClearPinIntFlag &rArr; PORT_HAL_ClearPinIntFlag &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Clear
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_PORTD_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>XCVR_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx123xdrv.o(i.XCVR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = XCVR_Init &rArr; spi_master_init &rArr; CLOCK_SYS_GetSpiFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ConfigureCLKO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_xcvr_pins
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyHwInit
</UL>

<P><STRONG><a name="[89]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, asptemp.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllExternalRefFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3c]"></a>_mutex_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clib_arm.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[3d]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clib_arm.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[3e]"></a>_mutex_initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clib_arm.o(i._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _mutex_initialize &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[3f]"></a>_mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clib_arm.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[46]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clib_arm.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; vPortDefineHeapRegions
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[128]"></a>configure_spi_pins</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pin_mux.o(i.configure_spi_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = configure_spi_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[120]"></a>configure_xcvr_pins</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, pin_mux.o(i.configure_xcvr_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = configure_xcvr_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVR_Init
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asp_EnableXCVRInterrupts
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12a]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
</UL>

<P><STRONG><a name="[fe]"></a>osEventFlagsNew</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os2.o(i.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osEventFlagsNew &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Init
</UL>

<P><STRONG><a name="[a2]"></a>osEventFlagsSet</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmsis_os2.o(i.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_EventSet
</UL>

<P><STRONG><a name="[107]"></a>osEventFlagsWait</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, cmsis_os2.o(i.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osEventFlagsWait &rArr; xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[132]"></a>osKernelGetState</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelGetState), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[127]"></a>osKernelInitialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelInitialize &rArr; vPortDefineHeapRegions
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[129]"></a>osKernelStart</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>osMessageQueueGet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueGet &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[10d]"></a>osMessageQueueNew</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[123]"></a>osMutexAcquire</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[124]"></a>osMutexDelete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[125]"></a>osMutexNew</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexNew), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[126]"></a>osMutexRelease</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexRelease), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[140]"></a>osThreadFlagsSet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmsis_os2.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osThreadFlagsSet &rArr; xTaskGenericNotifyFromISR &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
</UL>

<P><STRONG><a name="[100]"></a>osThreadNew</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Init
</UL>

<P><STRONG><a name="[108]"></a>pvPortMalloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, heap_5.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[183]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[15b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[10f]"></a>signal_func</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(i.signal_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = signal_func &rArr; osThreadFlagsSet &rArr; xTaskGenericNotifyFromISR &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[11c]"></a>spi_master_configure_serialization_lsb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.spi_master_configure_serialization_lsb))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
</UL>

<P><STRONG><a name="[11e]"></a>spi_master_configure_serialization_msb</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi.o(i.spi_master_configure_serialization_msb))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
</UL>

<P><STRONG><a name="[121]"></a>spi_master_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi.o(i.spi_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = spi_master_init &rArr; CLOCK_SYS_GetSpiFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_SetMasterSlave
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_Enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_pins
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_SetBaud
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSpiFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableSpiClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVR_Init
</UL>

<P><STRONG><a name="[11d]"></a>spi_master_transfer</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, spi.o(i.spi_master_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spi_master_transfer &rArr; SPI_HAL_WriteDataBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_ReadDataLow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_IsReadBuffFullPending
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_WriteDataBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
</UL>

<P><STRONG><a name="[146]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[17e]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[177]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[189]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[17a]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[39]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(i.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(i.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[14d]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[15a]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[148]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[147]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[134]"></a>vPortDefineHeapRegions</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, heap_5.o(i.vPortDefineHeapRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortDefineHeapRegions
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[9d]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[9e]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadRegister
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhySetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteFifoLSB
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_WriteBytesToFifoLSB
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_ReadBytesFromFifoLSB
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHead
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[155]"></a>vPortFree</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, heap_5.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[14b]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[13b]"></a>vQueueDelete</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[164]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[12d]"></a>vTaskDelay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[16b]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[174]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[173]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[175]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[176]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[184]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[135]"></a>vTaskStartScheduler</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[14f]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[50]"></a>vTaskSwitchContext</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[12f]"></a>xEventGroupCreate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[12e]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event_groups.o(i.xEventGroupCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[106]"></a>xEventGroupSetBits</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
</UL>

<P><STRONG><a name="[130]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupSetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[131]"></a>xEventGroupWaitBits</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[179]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler &rArr; prvSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[113]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13d]"></a>xQueueCreateMutex</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[13c]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[139]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[138]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[137]"></a>xQueueGenericReceive</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[158]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[13f]"></a>xQueueGenericSend</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[186]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[13e]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[136]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[13a]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[185]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[144]"></a>xTaskCreate</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[143]"></a>xTaskCreateStatic</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[142]"></a>xTaskGenericNotify</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskGenericNotify &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[141]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskGenericNotifyFromISR &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[187]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[133]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[165]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[181]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[154]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[16a]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[17b]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[150]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[178]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[160]"></a>xTimerGenericCommand</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[17c]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, timers.o(i.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a7]"></a>PORT_HAL_IsPinIntPending</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx123xdrv.o(i.PORT_HAL_IsPinIntPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = PORT_HAL_IsPinIntPending &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Detected
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Detected
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Detected
</UL>

<P><STRONG><a name="[a9]"></a>PORT_HAL_SetPinIntMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx123xdrv.o(i.PORT_HAL_SetPinIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = PORT_HAL_SetPinIntMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO4_Disable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO1_Disable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCVRDrv_IRQ_DIO0_Disable
</UL>

<P><STRONG><a name="[10a]"></a>PD_MAC_SendMessage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phystatemachine.o(i.PD_MAC_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PD_MAC_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[10b]"></a>PLME_MAC_SendMessage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phystatemachine.o(i.PLME_MAC_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLME_MAC_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[f9]"></a>Phy_EnterIdle</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, phystatemachine.o(i.Phy_EnterIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Phy_EnterIdle &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[fa]"></a>Phy_HandlePdDataReq</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, phystatemachine.o(i.Phy_HandlePdDataReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Phy_HandlePdDataReq &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPdDataRequest
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[fb]"></a>Phy_HandlePlmeCcaReq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, phystatemachine.o(i.Phy_HandlePlmeCcaReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Phy_HandlePlmeCcaReq &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_SetSequenceTiming
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[fc]"></a>Phy_HandlePlmeEdReq</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, phystatemachine.o(i.Phy_HandlePlmeEdReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Phy_HandlePlmeEdReq &rArr; PhyPlmeCcaEdRequest &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_XCVRRxWarmupTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeMultiplicator
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPlmeCcaEdRequest
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Task
</UL>

<P><STRONG><a name="[36]"></a>Phy_Task</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, phystatemachine.o(i.Phy_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Phy_Task &rArr; ASP_TelecSendRawData &rArr; Phy_SetSequenceTiming &rArr; PhyTimeSetEventTimeout &rArr; PhyTimeHandleEventTimeout &rArr; Radio_Phy_TimeRxTimeoutIndication &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyPpGetState
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyAbort
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASP_TelecSendRawData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeEdReq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePlmeCcaReq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_HandlePdDataReq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_EnterIdle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLME_MAC_SendMessage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PD_MAC_SendMessage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeDivider
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_LqiConvert
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_GetEnergyLevel
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_BufferAlloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListRemoveHeadMsg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLib_MemCpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyIsIdleRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phystatemachine.o(i.Phy_Init)
</UL>
<P><STRONG><a name="[ff]"></a>Phy_TaskInitialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, phystatemachine.o(i.Phy_TaskInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Phy_TaskInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyIsrPassRxParams
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_Init
</UL>

<P><STRONG><a name="[f2]"></a>TPM_HAL_ClearChnInt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_ClearChnInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_ClearChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
</UL>

<P><STRONG><a name="[e2]"></a>TPM_HAL_DisableChnInt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_DisableChnInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_DisableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTrigger
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableWaitTimeout
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableRxTimeout
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeDisableEventTimeout
</UL>

<P><STRONG><a name="[f3]"></a>TPM_HAL_EnableChnInt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_EnableChnInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_EnableChnInt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
</UL>

<P><STRONG><a name="[116]"></a>TPM_HAL_GetChnStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_GetChnStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_GetChnStatus &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>TPM_HAL_GetCounterVal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phytime.o(i.TPM_HAL_GetCounterVal))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
</UL>

<P><STRONG><a name="[ef]"></a>TPM_HAL_GetTimerOverflowStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, phytime.o(i.TPM_HAL_GetTimerOverflowStatus))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>TPM_HAL_IsChnIntEnabled</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_IsChnIntEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_IsChnIntEnabled &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>TPM_HAL_SetChnCountVal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_SetChnCountVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_SetChnCountVal &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTrigger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
</UL>

<P><STRONG><a name="[f6]"></a>TPM_HAL_SetChnMsnbaElsnbaVal</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phytime.o(i.TPM_HAL_SetChnMsnbaElsnbaVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TPM_HAL_SetChnMsnbaElsnbaVal &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimerInit
</UL>

<P><STRONG><a name="[f5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, phytime.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimerInit
</UL>

<P><STRONG><a name="[7d]"></a>Phy_SetRxOnUntilNextEvent</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, phyisr.o(i.Phy_SetRxOnUntilNextEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Phy_SetRxOnUntilNextEvent &rArr; PhyTimeSetRxTimeout &rArr; PhyTimeHandleEventRxTimeout &rArr; Phy_RxRestart &rArr; Radio_Phy_DummyEvent &rArr; PHY_EventSet &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phy_TimeMultiplicator
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetRxTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeReadClockTicks
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeGetEventTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyTimeSetEventTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandleSyncAddresEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhyRxHandlePHREvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAPinHandler_Interrupt
</UL>

<P><STRONG><a name="[16f]"></a>SPI_HAL_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.SPI_HAL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[171]"></a>SPI_HAL_IsReadBuffFullPending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(i.SPI_HAL_IsReadBuffFullPending))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[172]"></a>SPI_HAL_ReadDataLow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.SPI_HAL_ReadDataLow))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[16e]"></a>SPI_HAL_SetMasterSlave</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.SPI_HAL_SetMasterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_HAL_SetMasterSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_init
</UL>

<P><STRONG><a name="[a8]"></a>PORT_HAL_SetMuxMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(i.PORT_HAL_SetMuxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_xcvr_pins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_pins
</UL>

<P><STRONG><a name="[96]"></a>GPIO_HAL_ClearPinOutput</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_HAL_ClearPinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GPIO_HAL_ClearPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
</UL>

<P><STRONG><a name="[98]"></a>GPIO_HAL_ReadPinInput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_HAL_ReadPinInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GPIO_HAL_ReadPinInput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ReadPinInput
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_HAL_SetPinOutput</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.GPIO_HAL_SetPinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
</UL>

<P><STRONG><a name="[94]"></a>PORT_HAL_ClearPinIntFlag</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_gpio_driver.o(i.PORT_HAL_ClearPinIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = PORT_HAL_ClearPinIntFlag &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinIntFlag
</UL>

<P><STRONG><a name="[92]"></a>CLOCK_HAL_GetOutDiv1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock_mkw01z4.o(i.CLOCK_HAL_GetOutDiv1))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
</UL>

<P><STRONG><a name="[8f]"></a>CLOCK_HAL_GetOutDiv4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock_mkw01z4.o(i.CLOCK_HAL_GetOutDiv4))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>

<P><STRONG><a name="[8b]"></a>SIM_HAL_EnableClock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_clock_mkw01z4.o(i.SIM_HAL_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableSpiClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableTpmClock
</UL>

<P><STRONG><a name="[85]"></a>CLOCK_HAL_GetClkOutStat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetClkOutStat))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[82]"></a>CLOCK_HAL_GetMcgExternalClkFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetMcgExternalClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0RefFreq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[7f]"></a>CLOCK_HAL_IsPllSelected</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_IsPllSelected))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[118]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_tpm_driver.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_DRV_Init
</UL>

<P><STRONG><a name="[122]"></a>os_kernel_is_active</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clib_arm.o(i.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[12b]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[12c]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[17d]"></a>prvTestWaitCondition</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[16c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_5.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[167]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[37]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[152]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[153]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[156]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[157]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[15d]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[15e]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[169]"></a>prvUnlockQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[145]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[149]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[14e]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[151]"></a>prvDeleteTCB</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[38]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[159]"></a>prvInitialiseNewTask</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[14a]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[188]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[14c]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[168]"></a>prvGetNextExpireTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[15c]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[15f]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[161]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[163]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[162]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[166]"></a>prvSwitchTimerLists</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[3a]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
